load(
    "@nix_config//:config.bzl",
    "CLANG",
    "CLANG_LIB",
    "CLANG_LIB_VERSION",
    "LLVM",
    "SDK_AARCH64_UNKNOWN_LINUX_GNU",
)
load("//bazel/toolchain_rules:llvm_cc_toolchain_config.bzl", "llvm_cc_toolchain_config")

llvm_cc_toolchain_config(
    name = "cc_toolchain_config",
    archive_flags = [],
    builtin_executable_objects = [
        ":Scrt1.o",
        ":crti.o",
        ":crtbeginS.o",
        ":crtendS.o",
        ":crtn.o",
    ],
    builtin_include_directories = [
        "{}/usr/include/c++/10".format(SDK_AARCH64_UNKNOWN_LINUX_GNU),
        "{}/usr/include/aarch64-linux-gnu/c++/10".format(SDK_AARCH64_UNKNOWN_LINUX_GNU),
        "{}/usr/include/c++/10/backward".format(SDK_AARCH64_UNKNOWN_LINUX_GNU),
        "{}/lib/clang/{}/include".format(CLANG_LIB, CLANG_LIB_VERSION),
        "{}/usr/include/aarch64-linux-gnu".format(SDK_AARCH64_UNKNOWN_LINUX_GNU),
        "{}/usr/include".format(SDK_AARCH64_UNKNOWN_LINUX_GNU),
    ],
    builtin_libraries = [
        "c",
        "dl",
        "gcc_s",
        "gcc",
        "m",
        "pthread",
        "stdc++",
    ],
    builtin_library_directories = [
        "{}/lib/aarch64-linux-gnu".format(SDK_AARCH64_UNKNOWN_LINUX_GNU),
        "{}/usr/lib/gcc/aarch64-linux-gnu/10".format(SDK_AARCH64_UNKNOWN_LINUX_GNU),
        "{}/usr/lib/aarch64-linux-gnu".format(SDK_AARCH64_UNKNOWN_LINUX_GNU),
    ],
    clang = CLANG,
    compile_flags = [
        "-fno-exceptions",
        "-Werror",
        "-Wall",
        "-Wthread-safety",
        "-Wself-assign",
    ],
    dbg_compile_flags = [],
    dbg_link_flags = [],
    fastbuild_compile_flags = [],
    fastbuild_link_flags = [],
    link_flags = [
        "--fatal-warnings",
        "--sysroot={}".format(SDK_AARCH64_UNKNOWN_LINUX_GNU),
        "--dynamic-linker=/lib64/ld-linux-aarch64.so.1",
        "--build-id=md5",
        "--hash-style=gnu",
        "-z",
        "relro",
        "-z",
        "now",
    ],
    llvm = LLVM,
    opt_compile_flags = [],
    opt_link_flags = [
        "--gc-sections",
    ],
    target = "aarch64-unknown-linux-gnu",
)

cc_toolchain(
    name = "cc_toolchain",
    all_files = "@nix_config//:config.bzl",
    ar_files = "@nix_config//:config.bzl",
    as_files = "@nix_config//:config.bzl",
    compiler_files = "@nix_config//:config.bzl",
    coverage_files = "@nix_config//:config.bzl",
    dwp_files = "@nix_config//:config.bzl",
    linker_files = "@nix_config//:config.bzl",
    objcopy_files = "@nix_config//:config.bzl",
    strip_files = "@nix_config//:config.bzl",
    toolchain_config = "cc_toolchain_config",
)

toolchain(
    name = "toolchain",
    exec_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:nixos",
    ],
    target_compatible_with = [
        "@platforms//cpu:aarch64",
        "@platforms//os:linux",
    ],
    toolchain = ":cc_toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)
